// FUNCTIONS
@function build-class-name($context, $value: null, $breakpoint: null, $pseudo-classes: null, $pseudo-only: false) {
    $result: #{$context};

    @if($value) {
        $result: #{$result}\(#{$value}\);
    }

    @if($breakpoint) {
        $result: #{$result}#{$breakpoint};
    }

    @if($pseudo-classes) {
        $base: $result;

        @for $index from 1 through length($pseudo-classes) {
            $pseudo-class: nth($pseudo-classes, $index);
            $alias: if((length($pseudo-class) > 0), nth($pseudo-class, 1), null);
            $selector: if((length($pseudo-class) > 1), nth($pseudo-class, 2), null);
            $new: $base;

            @if ($alias) {
                $new: "#{$new}\\:#{$alias}";
            }

            @if ($selector) {
                $new: "#{$new}:#{$selector}";
            }

            @if ($pseudo-only == true and $index == 1) {
                $result: "#{$new}";
            } @else {
                $result: "#{$result}, .#{$new}";
            }
        }
    }

    @return $result
}

// Only for generating documentation
// Otherwise it will compile invalid syntax
$include-docs: false !default;
@mixin build-docs($title: null, $include-docs: false) {
    @if ($include-docs == true) {
        documentation {
            title: $title;
        }
    }
};

@mixin build-class($item, $breakpoint: null, $pseudo-classes: null, $pseudo-only: false) {
    $classes: map-get($item, classes);
    $values: map-get($item, values);

    @each $label, $value in $values {
        $value: if($value, $value, $label);

        @each $context, $properties in $classes {
            .#{build-class-name($context, $label, $breakpoint, $pseudo-classes, $pseudo-only)} {
                @each $property, $property-value in $properties {
                    $property-value: if($property-value, $property-value, $value);

                    #{$property}: $property-value;
                }
            }
        }
    }
}

@mixin build-module($item) {
    $title: map-get($item, title);
    $pseudo-only: map-get($item, pseudo-only);
    $breakpoints: map-get($item, breakpoints);
    $pseudo-classes: map-get($item, pseudo-classes);

    @include build-docs($title, $include-docs);

    @include build-class($item, null, $pseudo-classes, $pseudo-only);

    @if ($breakpoints) {
        @each $breakpoint, $object in $breakpoints {
            $query: map-get($object, query);

            @media #{$query} {
               @include build-class($item, $breakpoint, $pseudo-classes, $pseudo-only);
            }
        }
    }
}
